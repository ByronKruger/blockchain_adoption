const style = require('./style');
const postMessages = {
    FORTMATIC_HANDLE_RESPONSE: 'FORTMATIC_HANDLE_RESPONSE',
    FORTMATIC_HANDLE_REQUEST: 'FORTMATIC_HANDLE_REQUEST',
    FORTMATIC_HANDLE_FORTMATIC_REQUEST: 'FORTMATIC_HANDLE_FORTMATIC_REQUEST',
    FORTMATIC_OVERLAY_READY: 'FORTMATIC_OVERLAY_READY',
    FORTMATIC_SHOW_OVERLAY: 'FORTMATIC_SHOW_OVERLAY',
    FORTMATIC_HIDE_OVERLAY: 'FORTMATIC_HIDE_OVERLAY',
    FORTMATIC_USER_DENIED: 'FORTMATIC_USER_DENIED',
    FORTMATIC_USER_LOGOUT: 'FORTMATIC_USER_LOGOUT',
    FORTMATIC_UNAUTHORIZED_API_KEY: 'FORTMATIC_UNAUTHORIZED_API_KEY'
};

export default class Provider {
    constructor(fortmaticClient, options) {
        this.fortmaticClient = fortmaticClient;
        this.requests = {};
        this.queue = [];
        this.account = null;
        this.network = null;
        this.isFortmatic = true;
        this.overlayReady = false;

        if (!options.API_KEY) {
            throw new Error('Please provide a Fortmatic API key that you acquired from the developer dashboard.');
        }

        this.options = {
            API_KEY: options.API_KEY
        };

        this.overlay = this.createOverlay();
        this.listenMessage();
    }

    createOverlay()  {
        return new Promise((resolve, reject) => {
            const onload = () => {

                const styleElem = document.createElement('style');
                styleElem.innerHTML = style.css;
                styleElem.type = 'text/css';
                document.head.appendChild(styleElem);

                const iframe = document.createElement('iframe');
                iframe.className =  'fortmatic-iframe';
                iframe.src = `${this.fortmaticClient}/send?params=${btoa(JSON.stringify(this.options))}`;
                document.body.appendChild(iframe);

                resolve({ iframe });
            };
            if (['loaded', 'interactive', 'complete'].indexOf(document.readyState) > -1) {
                onload();
            }
            else {
                window.addEventListener('load', this::onload, false);
            }
        });
    };

    async showOverlay()  {
        const overlay = await this.overlay;
        overlay.iframe.style.display = 'block';
    }

    async hideOverlay() {
        const overlay = await this.overlay;
        overlay.iframe.style.display = 'none';
    }

    sendAsync(payload, cb) {

        this.enqueue(payload, cb);
    }

    sendFortmaticAsync(payload, cb) {

        const isNative = true;
        this.enqueue(payload, cb, isNative);
    }

    enqueue(payload, cb, isNative) {
        this.queue.push({payload, cb, isNative});
        this.overlayReady && this.dequeue();
    }

    async dequeue() {

        if (this.queue.length === 0) {return;}

        const item = this.queue.shift();

        if (item) {
            const payload = item.payload;
            const cb = item.cb;
            await this.postMessage(item.isNative
                ? postMessages.FORTMATIC_HANDLE_FORTMATIC_REQUEST
                : postMessages.FORTMATIC_HANDLE_REQUEST, item.payload);
            this.requests[payload.id] = { payload, cb };
            this.dequeue();
        }

    };

    async postMessage(msgType, payload)  {
        const overlay = await this.overlay;

        if (overlay.iframe.contentWindow) {
            overlay.iframe.contentWindow.postMessage({ msgType, payload }, '*');
        }
    };

    send(payload, cb) {

        const WARNING_MESSAGE = 'Non-async web3 methods will be deprecated in web3 > 1.0, and are not supported by the Fortmatic provider. An async method to be used instead.';
        const DEFAULT_LIVE_NETWORK_ID = 1;
        const DEFAULT_TEST_NETWORK_ID = 4;

        console.warn(WARNING_MESSAGE);
        this.sendAsync(payload, cb ? cb : () => { });

        let payloadResult = {};

        switch (payload.method) {

            case 'eth_accounts':
                payloadResult = this.account ? [this.account] : [];
                break;

            case 'eth_coinbase':
                payloadResult = this.account;
                break;

            case 'net_version':
                payloadResult = this.network || (this.options.API_KEY.startsWith('pk_live') ? DEFAULT_LIVE_NETWORK_ID : DEFAULT_TEST_NETWORK_ID);
                break;

            case 'eth_uninstallFilter':
                payloadResult = true;
                break;

            default:
                payloadResult = {};
        }
        return {
            id: payload.id,
            jsonrpc: payload.jsonrpc,
            result: payloadResult
        };
    }

    enable() {

        return new Promise((resolve, reject) => {

            const payload = {
                id: Math.floor(Math.random() * 90000) + 10000,
                method: 'eth_accounts',
                jsonrpc: '2.0',
                params: []
            };

            this.sendAsync(payload, (error, response) => {

                if (error) {
                    reject(error);
                }
                else {
                    resolve(response ? response.result : {});
                }
            });
        });
    }

    listenMessage() {

        window.addEventListener('message', (event) => {

            if (event.origin === this.fortmaticClient) {
                switch (event.data.msgType) {
                    case postMessages.FORTMATIC_OVERLAY_READY:
                        this.overlayReady = true;
                        this.dequeue();
                        break;
                    case postMessages.FORTMATIC_HANDLE_RESPONSE:
                        const id = event.data.response.id;
                        this.requests[id].cb(null, event.data.response);

                        if (this.requests[id].payload.method === 'eth_accounts') {
                            this.account = event.data.response.result[0];
                        }
                        else if (this.requests[id].payload.method === 'eth_coinbase') {
                            this.account = event.data.response.result;
                        }
                        else if (this.requests[id].payload.method === 'net_version') {
                            this.network = event.data.response.result;
                        }

                        this.dequeue();
                        break;

                    case postMessages.FORTMATIC_HIDE_OVERLAY:
                        this.hideOverlay();
                        break;

                    case postMessages.FORTMATIC_SHOW_OVERLAY:
                        this.showOverlay();
                        break;

                    case postMessages.FORTMATIC_USER_LOGOUT:
                        this.account = null;
                        this.network = null;
                        break;

                    case postMessages.FORTMATIC_UNAUTHORIZED_API_KEY:
                        this.overlayReady = false;
                        throw new Error('Given API key is not authorized to access the resource.');

                    case postMessages.FORTMATIC_USER_DENIED:
                        this.queue.forEach((item) => item.cb(new Error('User denied transaction signature.')));
                        break;

                    default:
                        break;
                }
            }
        });
    };
}
