import Provider from './provider';

const fmMethods = {
    COMPOSE_SEND: 'fm_composeSend',
    LOGOUT: 'fm_logout'
};

module.exports = class Fortmatic {

    constructor(apiKey, options) {
        this.fortmaticClient = options && options.url ? options.url : 'https://x.fortmatic.com';
        if (!apiKey) {
            throw new Error('Please provide a Fortmatic API key that you acquired from the developer dashboard.');
        }
        this.apiKey = apiKey;
        this.options = options;
        this.transactions = {
            send: (payload, cb) => {
                const fmRequestPayload = new FmRequestPayload(fmMethods.COMPOSE_SEND, payload);
                this.getProvider().sendFortmaticAsync(fmRequestPayload, cb);
            }
        };
        this.user = {
            login: () => {
                return this.getProvider().enable();
            },
            logout: () => {
                this.getProvider().account = null;
                this.getProvider().network = null;
                const fmRequestPayload = new FmRequestPayload(fmMethods.LOGOUT);
                this.getProvider().sendFortmaticAsync(fmRequestPayload, () => {});
            }
        };
    }

    getProvider() {
        const _this = this;
        if (!this.provider) {
            this.provider = new Provider(_this.fortmaticClient, {
                API_KEY: _this.apiKey
            });
        }
        return this.provider;
    }
};

class FmRequestPayload {
    constructor(method, payload) {
        if (method &&
                (method === fmMethods.COMPOSE_SEND || method === fmMethods.LOGOUT)) {
            this.id = Math.floor(Math.random() * 90000) + 10000;
            this.method = method;
            this.params = payload ? [
                {to: payload.to,
                    value: payload.amount}
            ] : [{}];
        } else {
            throw new Error('Invalid FmRequestPayload parameters. Please specify a valid method');
        }
    }
}
